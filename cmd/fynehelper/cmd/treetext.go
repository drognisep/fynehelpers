package cmd

const (
	treeNodeText = `// Code generated by fynehelper; DO NOT EDIT.

package {{ .Package }}

import (
	"sync"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
	"github.com/drognisep/fynehelpers/generation"
	"github.com/drognisep/fynehelpers/layouthelp"
)

var _ fyne.Widget = (*{{ .TypeBaseHidden }}Node)(nil)
{{- if .GenTapped }}
var _ fyne.Tappable = (*{{ .TypeBaseHidden }}Node)(nil)
{{- end -}}
{{- if .GenDoubleTapped }}
var _ fyne.DoubleTappable = (*{{ .TypeBaseHidden }}Node)(nil)
{{- end -}}
{{- if .GenSecondTapped }}
var _ fyne.SecondaryTappable = (*{{ .TypeBaseHidden }}Node)(nil)
{{- end}}
type {{ .TypeBaseHidden }}Node struct {
	widget.BaseWidget

	mux    sync.RWMutex
	id     widget.TreeNodeID
	render *{{ .TypeBaseHidden }}NodeRenderer
	tree   *{{ .TypeBaseTitle }}Tree
}

func (t *{{ .TypeBaseHidden }}Node) CreateRenderer() fyne.WidgetRenderer {
	t.render = new{{ .TypeBaseTitle }}NodeRenderer()
	return t.render
}

func new{{ .TypeBaseTitle }}Node(tree *{{ .TypeBaseTitle }}Tree) *{{ .TypeBaseHidden }}Node {
	node := &{{ .TypeBaseHidden }}Node{
		tree: tree,
	}
	node.ExtendBaseWidget(node)
	return node
}

func (t *{{ .TypeBaseHidden }}Node) update(id widget.TreeNodeID, model generation.TreeModel) {
	t.mux.Lock()
	t.id = id
	if t.render != nil {
		t.render.label.SetText(model.DisplayString())
		t.render.icon.SetResource(model.DisplayIcon())
	}
	t.mux.Unlock()
	t.Refresh()
}

{{- if .GenTapped }}

func (t *{{ .TypeBaseHidden }}Node) Tapped(event *fyne.PointEvent) {
	t.mux.RLock()
	id := t.id
	t.mux.RUnlock()
	t.tree.Tapped(id, event)
}
{{end -}}

{{- if .GenDoubleTapped }}

func (t *{{ .TypeBaseHidden }}Node) DoubleTapped(event *fyne.PointEvent) {
	t.mux.RLock()
	id := t.id
	t.mux.RUnlock()
	t.tree.DoubleTapped(id, event)
}
{{end -}}

{{- if .GenSecondTapped }}

func (t *{{ .TypeBaseHidden }}Node) TappedSecondary(event *fyne.PointEvent) {
	t.mux.RLock()
	id := t.id
	t.mux.RUnlock()
	t.tree.TappedSecondary(id, event)
}
{{end}}
var _ fyne.WidgetRenderer = (*{{ .TypeBaseHidden }}NodeRenderer)(nil)

type {{ .TypeBaseHidden }}NodeRenderer struct {
	icon    *widget.Icon
	label   *widget.Label
	layout  fyne.Layout
	objects []fyne.CanvasObject
}

func new{{ .TypeBaseTitle }}NodeRenderer() *{{ .TypeBaseHidden }}NodeRenderer {
	render := &{{ .TypeBaseHidden }}NodeRenderer{
		icon: &widget.Icon{},
		label: &widget.Label{
			Alignment: fyne.TextAlignLeading,
			TextStyle: fyne.TextStyle{},
		},
		layout: layout.NewHBoxLayout(),
	}
	render.objects = []fyne.CanvasObject{render.icon, render.label}
	return render
}

func (r *{{ .TypeBaseHidden }}NodeRenderer) Destroy() {
	r.icon = nil
	r.label = nil
	r.layout = nil
	r.objects = nil
}

func (r *{{ .TypeBaseHidden }}NodeRenderer) Layout(parent fyne.Size) {
	r.layout.Layout(r.objects, parent)
}

func (r *{{ .TypeBaseHidden }}NodeRenderer) MinSize() fyne.Size {
	return layouthelp.AccumulateWidth(r.icon.MinSize(), r.label.MinSize())
}

func (r *{{ .TypeBaseHidden }}NodeRenderer) Objects() []fyne.CanvasObject {
	return r.objects
}

func (r *{{ .TypeBaseHidden }}NodeRenderer) Refresh() {
	for _, obj := range r.objects {
		obj.Refresh()
	}
}
`
	treeText = `// Code generated by fynehelper; DO NOT EDIT.

package {{ .Package }}

import (
	"log"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/widget"
	"github.com/drognisep/fynehelpers/generation"
)

var _ fyne.CanvasObject = (*{{ .TypeBaseTitle }}Tree)(nil)

// {{ .TypeBaseTitle }}Tree is a widget.Tree implementation that manages IDs through generation.TreeModelRegistry.
// This is designed to be the gatekeeper for all widget and model mutations.
type {{ .TypeBaseTitle }}Tree struct {
	widget.Tree
	*generation.TreeModelRegistry

{{- if .GenTapped }}
	OnTapped          func(id widget.TreeNodeID, model generation.TreeModel, event *fyne.PointEvent) // OnTapped is called by the {{ .TypeBaseHidden }}Node that receives an event from Fyne.
{{end -}}
{{- if .GenDoubleTapped }}
	OnDoubleTapped    func(id widget.TreeNodeID, model generation.TreeModel, event *fyne.PointEvent) // OnDoubleTapped is called by the {{ .TypeBaseHidden }}Node that receives an event from Fyne.
{{end -}}
{{- if .GenSecondTapped }}
	OnTappedSecondary func(id widget.TreeNodeID, model generation.TreeModel, event *fyne.PointEvent) // OnTappedSecondary is called by the {{ .TypeBaseHidden }}Node that receives an event from Fyne.
{{end}}
}

// New{{ .TypeBaseTitle }}Tree initializes the tree and adds all modelRoots to the registry.
func New{{ .TypeBaseTitle }}Tree(modelRoots ...generation.TreeModel) *{{ .TypeBaseTitle }}Tree {
	tree := &{{ .TypeBaseTitle }}Tree{
		TreeModelRegistry: generation.NewTreeModelRegistry(),
	}
	tree.Tree = widget.Tree{
		ChildUIDs: tree.Children,
		CreateNode: func(bool) (o fyne.CanvasObject) {
			return new{{ .TypeBaseTitle }}Node(tree)
		},
		IsBranch: tree.HasChildren,
		UpdateNode: func(id widget.TreeNodeID, isBranch bool, node fyne.CanvasObject) {
			treeModel, ok := node.(*{{ .TypeBaseHidden }}Node)
			if !ok {
				return
			}
			modelNode := tree.Node(id)
			if modelNode == nil {
				return
			}
			treeModel.update(id, modelNode)
		},
	}
	for _, root := range modelRoots {
		if _, err := tree.AddChild("", root); err != nil {
			log.Printf("Error adding model root: %v\n%v\n", err, root)
		}
	}
	tree.ExtendBaseWidget(tree)
	return tree
}

{{- if .GenTapped }}

func (t *{{ .TypeBaseTitle }}Tree) Tapped(id widget.TreeNodeID, event *fyne.PointEvent) {
	if t.OnTapped != nil {
		t.OnTapped(id, t.Node(id), event)
	}
}
{{end -}}

{{- if .GenDoubleTapped }}

func (t *{{ .TypeBaseTitle }}Tree) DoubleTapped(id widget.TreeNodeID, event *fyne.PointEvent) {
	if t.OnDoubleTapped != nil {
		t.OnDoubleTapped(id, t.Node(id), event)
	}
}
{{end -}}

{{- if .GenSecondTapped}}

func (t *{{ .TypeBaseTitle }}Tree) TappedSecondary(id widget.TreeNodeID, event *fyne.PointEvent) {
	if t.OnTappedSecondary != nil {
		t.OnTappedSecondary(id, t.Node(id), event)
	}
}
{{end}}
func (t *{{ .TypeBaseTitle }}Tree) AddChild(parentID widget.TreeNodeID, data generation.TreeModel) (widget.TreeNodeID, error) {
	defer t.Refresh()
	return t.TreeModelRegistry.AddChild(parentID, data)
}

func (t *{{ .TypeBaseTitle }}Tree) RemoveChild(dataID widget.TreeNodeID) {
	defer t.Refresh()
	t.TreeModelRegistry.RemoveChild(dataID)
}
`
)
